version: "3"
services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.2
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker --providers.docker.swarmMode=true
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints:
          - node.role == manager
  redis:
    image: redis:alpine
    ports:
      - "6379"
    # networks:
      # - frontend
    deploy:
      labels:
        - traefik.enable=false
      replicas: 2
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
  db:
    image: postgres:alpine
    volumes:
      - db-data:/var/lib/postgresql/data
    # networks:
      # - backend
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    deploy:
      labels:
        - traefik.enable=false
      placement:
        constraints: [node.role == manager]
  vote:
    image: dockersamples/examplevotingapp_vote:before
    # networks:
      # - frontend
    depends_on:
      - redis
    deploy:
      replicas: 2
      labels:
        - traefik.enable=true
        # - traefik.docker.lbswarm=true
        # - traefik.docker.network=frontend
        - traefik.http.routers.vote-route.rule=Host(`192.168.0.231`)
        - traefik.http.services.vote-service.loadbalancer.server.port=80
        # - traefik.http.services.vote-service.loadbalancer.sticky.cookie=true
      update_config:
        parallelism: 2
      restart_policy:
        condition: on-failure
  result:
    image: dockersamples/examplevotingapp_result:before
    ports:
      - 5001:80
    # networks:
      # - backend
    depends_on:
      - db
    deploy:
      labels:
        - traefik.enable=false
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: dockersamples/examplevotingapp_worker
    # networks:
      # - frontend
      # - backend
    deploy:
      mode: replicated
      replicas: 1
      labels: 
        - APP=VOTING
        - traefik.enable=false
      restart_policy:
        condition: on-failure
        delay: 10s
        # max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]
# networks:
  # frontend:
  # backend:

volumes:
  db-data: